
--# Main
--SodaSpec

--NOTE: SodaSpec will only work in projects with SODA as a dependency. As of this writing you can get SODA at https://github.com/Utsira/Soda

--[[

IT IS STRONGLY SUGGESTED to use SodaSpec by cut-and-pasting the 'SodaSpec' tab directly into your project, NOT using this project as a dependency.

Having the tab in your project allows you to use autocomplete to discover SodaSpec's functions. 

Using autocomplete this way is one of the main advantages of SodaSpec: it saves you from having to remember the complex syntax required to directly manage SODA elements. 

]]

--General note:
--Any size and location settings that are given as decimals are treated differently than integers by Soda. Decimals always specify the position of the center of the element, for one thing, and are always treated as percentages of the relevant parameter of the parent element, or the screen itself if there is no parent. For example "fooSpec:setSize(0.5, 0.5)" defines an element as being centered exactly in the middle of the screen.

-- Main

-- This page is a demo of every single element SodaSpec can create.

function setup()
    displayMode(FULLSCREEN)
    supportedOrientations(LANDSCAPE_ANY)
    --SODA:
    profiler.init()
    Soda.setup()
    --/SODA
    --some convenience variables
    local leftMargin, xSpacing, stdWidth, currentRowHeight, ySpacing, stdHeight
    xSpacing = 1 / 11
    ySpacing = 1 / 11
    leftMargin = xSpacing
    currentRowHeight = 1 - ySpacing
    stdWidth = xSpacing * 0.85
    stdHeight = ySpacing * 0.65
    --find the current font height to use with sizing elements
    local defaultHeight = fontMetrics().xHeight
    --if the following works, delete the above
    defaultHeight = stdHeight
    --create a spec
    local spec = SodaSpec()
    spec:setSize(stdWidth, defaultHeight)
    print(stdWidth, defaultHeight)
    --use it to make a frame
    spec:setTitle("frame")
    spec:setPosition(leftMargin, currentRowHeight)
    spec:setFontColor(Soda.style.default.text.fill)
    local frame = spec:buildFrame()
    --use it to make a button
    spec:setTitle("button")
    spec:setPosition(xSpacing * 2.0, currentRowHeight)
    spec:setFontColor("blue")
    local button = spec:buildButton()
    --use it to make a blurred button
    spec:setTitle("blurred")
    spec:setPosition(xSpacing * 3.0, currentRowHeight)
    spec:setFontColor("red")
    spec:setBlurred(true)
    local blurButton = spec:buildButton()
    --create a spec2 identical to spec, by initializing it with the specTable() function of spec
    local spec2 = SodaSpec(spec:specTable())
    --make another blurred button using spec2
    spec2:setTitle("blur2")
    spec2:setPosition(xSpacing * 4.0, currentRowHeight)
    spec2:setFontColor("grey")
    local blurButton2 = spec2:buildButton() --*** bug note? *** it seems like making two buttons causes each button to apply the blur effect twice?
    --change spec2 to make a button with a green fill
    local shapeGreen = color(98, 189, 100, 255)
    local fontGreen = color(29, 46, 25, 255)
    spec2:setShapeFill(shapeGreen)
    spec2:setFontColor(fontGreen)
    spec2:setPosition(xSpacing * 5.0, currentRowHeight)
    spec2:setTitle("green")
    spec2:setBlurred(false)
    local greenFillButton = spec2:buildButton()
    --change spec2 to give that button a highlight with orange fill and red text
    local buttonOrange = color(255, 145, 0, 255)
    spec2:setHighlightFill(buttonOrange)
    spec2:setHighlightTextColor(color(255, 0, 0, 255))
    spec2:setFontColor(buttonOrange)
    spec2:setPosition(xSpacing * 6.0, currentRowHeight)
    spec2:setTitle("orange")
    local orangeHighlightButton = spec2:buildButton()
    --make a spec3 that takes its size from a standard Soda QueryButton
    local spec3 = SodaSpec()
    local standardQuery = Soda.QueryButton{t = "t"}
    spec3:setSize(standardQuery.w, standardQuery.h)
    standardQuery.kill = true
    --using spec3 make various predefined buttons
    spec3:setPosition(xSpacing * 6.75, currentRowHeight)
    local queryButton = spec3:buildQueryButton()
    spec3:setPosition(xSpacing * 7.25, currentRowHeight)
    local settings = spec3:buildSettingsButton()
    spec3:setPosition(xSpacing * 7.75, currentRowHeight)
    local menu = spec3:buildMenuButton()
    spec3:setPosition(xSpacing * 8.25, currentRowHeight)
    local back = spec3:buildBackButton()
    spec3:setPosition(xSpacing * 8.75, currentRowHeight)
    local forward = spec3:buildForwardButton()
    spec3:setPosition(xSpacing * 9.25, currentRowHeight)
    local close = spec3:buildCloseButton()
    spec3:setPosition(xSpacing * 9.75, currentRowHeight)
    local dropDown = spec3:buildDropDownButton()
    spec3:setPosition(xSpacing * 10.25, currentRowHeight)
    local add = spec3:buildAddButton()
    local spec4 = SodaSpec()
    --make a spec4, for creating toggles and switches on a new row
    spec4:setSize(0.1, defaultHeight)
    spec4:setTitle("toggle")
    currentRowHeight = currentRowHeight - ySpacing
    spec4:setPosition(xSpacing, currentRowHeight)
    local toggle = spec4:buildToggle()
    spec4:setPosition(xSpacing * 1.85, currentRowHeight)
    local menuToggle = spec4:buildMenuToggle()
    spec4:setPosition(xSpacing * 3.05, currentRowHeight)
    spec4:setTitle("switch")
    local switch = spec4:buildSwitch()
    --set common specs for creating segment panels
    spec4:setTitle("")
    spec4:setSize(0.4, 0.5)
    spec4:setPosition(xSpacing * 6, currentRowHeight - (ySpacing * 2.3))
    spec4:useShapeRoundedRect()
    --make four panels of different colors
    spec4:setShapeFill(
    color(49, 255, 0, 64))
    local panel1 = spec4:buildFrame()
    spec4:setShapeFill(
    color(255, 0, 225, 80))
    local panel2 = spec4:buildFrame()
    spec4:setShapeFill(
    color(0, 237, 255, 67))
    local panel3 = spec4:buildFrame()
    spec4:setShapeFill(
    color(255, 228, 0, 66))
    local panel4 = spec4:buildFrame()
    --create a spec5 for makng a segment control that switches between panels
    local spec5 = SodaSpec()
    spec5:setSize(0.38, 0.24)
    spec5:setFontColor(
    color(30, 35, 123, 255))
    spec5:setTitle("these button segments change panels")
    spec5:setPosition(xSpacing * 5.97, currentRowHeight - (ySpacing * 1.05))
    local textAndPanels = {
        text = {"seg-", "ment", "pan-", "els"},
        panels = {panel1, panel2, panel3, panel4}
    }
    local segments = spec5:buildSegmentPanels(textAndPanels)
    --create a spec6 for a selectable list
    local spec6 = SodaSpec()
    spec6:setParent(panel1)
    spec6:setSize(0.35, 0.5)
    spec6:setPosition(0.5, 0.3)
    local textsForList = {text = {"tap", "any", "item", "in", "this", "scrollable", "list"}}
    local list = spec6:buildList(textsForList)
    --create a dropdown list with spec6 (this apparently causes an error unless it has a parent)
    currentRowHeight = currentRowHeight - ySpacing
    spec6:setSize(0.65, defaultHeight * 1.8)
    spec6:setTitle("dropdown")
    spec6:setFontColor(
    color(26, 45, 152, 255))
    spec6:setPosition(0.5, 0.4)
    spec6:setParent(panel2)
    local dropdown = spec6:buildDropdownList(textsForList)
    --create a spec7 for a slider
    currentRowHeight = currentRowHeight - (ySpacing * 1.95)
    local sliderSpecs = {min = 1, max = 100}
    local spec7 = SodaSpec()
    spec7:setTitle("slider")
    spec7:setParent(panel3)
    spec7:setSize(0.7, defaultHeight)
    spec7:setPosition(0.5, 0.3)
    local slider = spec7:buildSlider(sliderSpecs)
    --use spec7 for a text entry field, doesn't exactly work as advertised right now
    spec7:setTitle("")
    spec7:setParent(panel4)
    spec7:setSize(0.8, 0.35)
    spec7:setPosition(0.5, 0.35)
    local textEntry = spec7:buildTextEntry("text entry field sort of")
    --create a text scroll with spec7
    spec7:setParent(_)
    spec7:setSize(0.3, 0.25)
    spec7:setPosition(xSpacing * 2, currentRowHeight + (ySpacing))
    spec7:setTextBodyForScrollingText(textScrollText())
    local textScroll = spec7:buildTextScroll(textScrollText())
    --use spec7 for a window with a text scroll in it
    currentRowHeight = currentRowHeight - (ySpacing * 2)
    spec7:setPosition(xSpacing * 2, currentRowHeight)
    spec7:setTextBodyForScrollingText(textWindowText())
    local textWindow = spec7:buildTextWindow(textWindowText())
    --create a spec for an alert
    local alertSpec = SodaSpec()
    alertSpec:setSize(0.25, 0.25)
    alertSpec:setTitle("Regular Alert")
    alertSpec:setButtonContent("Just a regular alert!")
    --make spec7 show that alert
    spec7:setTitle("alert")
    currentRowHeight = currentRowHeight - (ySpacing * 0.75)
    spec7:setPosition(xSpacing * 4.25, currentRowHeight)
    spec7:setSize(stdWidth, stdHeight)
    spec7:setCallback(function ()
        alertSpec:buildAlert()
    end)
    local alertMaker = spec7:buildButton()
    --make a spec for an Alert2, initializing it with the specs of the regular alert
    local alertSpec2 = SodaSpec(alertSpec:specTable())
    alertSpec2:setTitle("Alert 2")
    alertSpec2:setButtonContent("This one has two buttons!")
    spec7:setTitle("alert2")
    spec7:setPosition(xSpacing * 5.25, currentRowHeight)
    spec7:setCallback(function ()
        alertSpec2:buildAlert2()
    end)
    local alertMaker2 = spec7:buildButton()
    --use spec7 for a normal window
    spec7:setTitle("A Window")
    spec7:setSize(0.25, 0.25)
    spec7:setPosition(xSpacing * 7.25, currentRowHeight - ySpacing)
    spec7:setCallback(nil)
    local window = spec7:buildWindow()
    --use new spec for a button with a shadow
    local spec8 = SodaSpec()
    spec8:setTitle("has shadow")
    spec8:setSize(stdWidth * 2, stdHeight)
    spec8:setShadow(true)
    spec8:setPosition(xSpacing * 9.55, currentRowHeight)
    spec8:setCallback(nil)
    local shadowButton = spec8:buildButton()
end

function textScrollText()
    return "TextScroll: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas eget mauris magna. Fusce posuere scelerisque lectus, et tristique mauris posuere quis. Ut imperdiet quam ac eleifend ornare. Duis iaculis sed dui a porta. Duis auctor est ac nulla varius finibus. Cras laoreet massa mauris, eget congue elit molestie nec. Sed vulputate imperdiet nisl pretium volutpat. Vestibulum ac nisi ut velit sodales pharetra varius nec enim. Donec dapibus lacus sit amet enim vestibulum, eu rhoncus massa euismod."
end

function textWindowText()
    return "textWindow by default includes an 'x' for closing the window and 'cancel' and 'ok'. To get rid of them use shouldShowCloseX(false) and hideDefaultCancelAndOK()"
end

function draw()
    --SODA
    pushMatrix()
    Soda.camera()
    drawing()
    popMatrix()
    profiler.draw()
    --/SODA
end

function drawing(breakPoint)
    pushStyle()
    spriteMode(CORNER)
    sprite("Cargo Bot:Game Area", 0, 0, WIDTH, HEIGHT)
    popStyle()
    --SODA
    --in order for gaussian blur to work, do all your drawing here
    Soda.draw(breakPoint)
    --/SODA
end

function touched(touch)
    --SODA
   if Soda.touched(touch) then return end
    --/SODA
end


--MISC SODA STUFF
--user inputs:

function keyboard(key)
    Soda.keyboard(key)
end

function orientationChanged(ori)
    Soda.orientationChanged(ori)
end

--measure performance:

profiler={}

function profiler.init(quiet)    
    profiler.del=0
    profiler.c=0
    profiler.fps=0
    profiler.mem=0
    if not quiet then
        parameter.watch("profiler.fps")
        parameter.watch("profiler.mem")
    end
end

function profiler.draw()
    profiler.del = profiler.del +  DeltaTime
    profiler.c = profiler.c + 1
    if profiler.c==10 then
        profiler.fps=profiler.c/profiler.del
        profiler.del=0
        profiler.c=0
        profiler.mem=collectgarbage("count", 2)
    end
end
--# SodaSpec
--SodaSpec is a fun and accessible wrapper for the SODA library.
--SODA was created by Codea Forums user yojimbo2000, and is rightly described on its github page as "gorgeous and powerful". You can find it at https://github.com/Utsira/Soda (as of this writing).

--SodaSpec's main advantage over hand-rolled Soda is that all its features show up in autocomplete. If you dont know how to use Soda, in theory you can learn everything you need to know from looking at the autocomplete suggestions.
--A SodaSpec object is not itself a Soda object or UI element. Instead, the idea is that you create a set of parameters, or a "spec", and from the spec you can create one (or multiple different) UI elements. 

--How to use:
--First, create a SodaSpec object, which is as simple as "foo = SodaSpec()".
--Second, use that object's methods such as foo:setSize(...) and foo:setFontColor(...) to set your desired specs.
--Third, build one or more Soda elements from the spec, using build functions such as foo:buildFrame() or foo:buildButton().
--The element created will be a bona-fide Soda object, and can be directly manipulated in all the ways all other Soda elements can. 

--About this tab:
--In order to avoid tripping you up, SodaSpec allows you to build almost all of its elements using a 'build___()' function that takes no parameters. A few of the more complicated elements do require parameters though.
--If you scroll past the first few big functions at the start of this class, the 'build' functions and 'set' functions are all grouped together. 
--Inspect the 'build' functions to easily see all the things SodaSpec can create, and also which functions take parameters. Inspect the 'set' functions to easily see how to configure the properties of elements before you build them. 

--General note:
--Any size and location settings that are given as decimals are treated differently than integers by Soda. Decimals always specify the position of the center of the element, for one thing, and are always treated as percentages of the relevant parameter of the parent element, or the screen itself if there is no parent. For example "fooSpec:setSize(0.5, 0.5)" defines an element as being centered exactly in the middle of the screen.

SodaSpec = class()

function SodaSpec:init(optionalSpecTable)
    self.title = "Thug Life"
    self.content = ""
    self.ok = "OK"
    self.cancel = "Cancel"
    self.textBody = "textBody parameter undefined"
    self.close = true
    self.x = 0.5
    self.y = 0.5
    self.h = 0.1
    self.w = 0.1
    self.blurred = false
    self.shadow = false
    self.shape = Soda.button
    self.callback = function() print("action not defined for", self) end
    self.style = {}
    self.style.shape = {}
    self.style.text = {}
    self.style.highlight = {}
    self.style.title = {}
    self.style.textEntry = {}
    self.style.textBox = {}
    -- These are listed individually so that they show up in auto-complete. 
    self.style.shape.fill = "white"
    self.style.shape.stroke = "lightGrey"
    self.style.shape.strokeWidth = 2
    --
    self.style.text.fill = "blue"
    self.style.text.font = "HelveticaNeue-Light"
    self.style.text.fontSize = 1
    --
    self.style.highlight.shape = {}
    self.style.highlight.text = {}
    self.style.highlight.shape.fill = "blue"
    self.style.highlight.shape.noStroke = true
    self.style.highlight.shape.stroke = "white"
    self.style.highlight.text.fill = "white"
    self.style.highlight.text.fontSize = 1
    --
    self.style.title.fill = "blue"
    self.style.title.font = "HelveticaNeue"
    --
    self.style.textEntry.fill = "black"
    self.style.textEntry.font = "Inconsolata"
    self.style.textEntry.fontSize = 1.2
    --
    self.style.textBox.fill = "black"
    self.style.textBox.font = "Inconsolata"
    self.style.textBox.fontSize = 1.2
    if optionalSpecTable ~= nil then
        self:setSpecsFrom(optionalSpecTable)
    end
end

function SodaSpec:setSpecsFrom(specTable)
    print(self.style.shape.fill)
    self.title = specTable.title
    self.content = specTable.content
    self.ok = specTable.ok
    self.cancel = specTable.cancel
    self.close = specTable.close
    self.textBody = specTable.textBody
    self.x = specTable.x
    self.y = specTable.y
    self.h = specTable.h
    self.w = specTable.w
    self.blurred = specTable.blurred
    self.shadow = specTable.shadow
    self.shape = specTable.shape
    self.callback = specTable.callback
    self.parent = specTable.parent
    --
    if specTable.style == nil then
        return
    end
    --
    if specTable.style.shape ~= nil then
        self.style.shape.fill = specTable.style.shape.fill
        self.style.shape.stroke = specTable.style.shape.stroke
        self.style.shape.strokeWidth = specTable.style.shape.strokeWidth
    end
    --
    if specTable.style.text ~= nil then
        self.style.text.fill = specTable.style.text.fill
        self.style.text.font = specTable.style.text.font
        self.style.text.fontSize = specTable.style.text.fontSize
    end
    --
    if specTable.style.highlight ~= nil then
        if specTable.style.highlight.shape ~= nil then
            self.style.highlight.shape.fill = specTable.style.highlight.shape.fill
            self.style.highlight.shape.noStroke = specTable.style.highlight.shape.noStroke
            self.style.highlight.shape.stroke = specTable.style.highlight.shape.stroke
        end
        if specTable.style.highlight.text ~= nil then
            self.style.highlight.text.fill = specTable.style.highlight.text.fill
            self.style.highlight.text.fontSize = specTable.style.highlight.text.fontSize
        end
    end
    --
    if specTable.style.title ~= nil then
        self.style.title.fill = specTable.style.title.fill
        self.style.title.font = specTable.style.title.font
    end
    --
    if specTable.style.textEntry ~= nil then
        self.style.textEntry.fill = specTable.style.textEntry.fill
        self.style.textEntry.font = specTable.style.textEntry.font
        self.style.textEntry.fontSize = specTable.style.textEntry.fontSize
    end
    --
    if specTable.style.textBox ~= nil then
        self.style.textBox.fill = specTable.style.textBox.fill
        self.style.textBox.font = specTable.style.textBox.font
        self.style.textBox.fontSize = specTable.style.textBox.fontSize
    end
end

function SodaSpec:specTable()
    return {
        title = self.title,
        content = self.content,
        ok = self.ok,
        cancel = self.cancel,
        close = self.close,
        textBody = self.textBody,
        x = self.x,
        y = self.y,
        h = self.h,
        w = self.w,
        blurred = self.blurred,
        shadow = self.shadow,
        shape = self.shape,
        callback = self.callback,
        parent = self.parent,
    --
        style = {
    --
            shape = {
                fill = self.style.shape.fill,
                stroke = self.style.shape.stroke,
                strokeWidth = self.style.shape.strokeWidth
            },
    --
            text = {
                fill = self.style.text.fill,
                font = self.style.text.font,
                fontSize = self.style.text.fontSize
            },
    --
            highlight =  {
                shape = {
                    fill = self.style.highlight.shape.fill,
                    noStroke = self.style.highlight.shape.noStroke,
                    stroke = self.style.highlight.shape.stroke
                },
                text = {
                    fill = self.style.highlight.text.fill,
                    fontSize = self.style.highlight.text.fontSize
                }
            },
    --
            title = {
                fill = self.style.title.fill,
                font = self.style.title.font
            },
    --
            textEntry = {
                fill = self.style.textEntry.fill,
                font = self.style.textEntry.font,
                fontSize = self.style.textEntry.fontSize
            },
    --
            textBox = {
                fill = self.style.textBox.fill,
                font = self.style.textBox.font,
                fontSize = self.style.textBox.fontSize
            }
        }
    }
end

--build functions

function SodaSpec:buildButton()
    return Soda.Button(self:specTable())
end

function SodaSpec:buildFrame()
    return Soda.Frame(self:specTable())
end

function SodaSpec:buildQueryButton()
    return Soda.QueryButton(self:specTable())
end

function SodaSpec:buildSettingsButton()
    return Soda.SettingsButton(self:specTable())
end

function SodaSpec:buildMenuButton()
    return Soda.MenuButton(self:specTable())
end

function SodaSpec:buildBackButton()
    return Soda.BackButton(self:specTable())
end

function SodaSpec:buildForwardButton()
    return Soda.ForwardButton(self:specTable())
end

function SodaSpec:buildCloseButton()
    return Soda.CloseButton(self:specTable())
end

function SodaSpec:buildDropDownButton()
    return Soda.DropdownButton(self:specTable())
end

function SodaSpec:buildAddButton()
    return Soda.AddButton(self:specTable())
end

function SodaSpec:buildToggle()
    return Soda.Toggle(self:specTable())
end

function SodaSpec:buildMenuToggle()
    return Soda.MenuToggle(self:specTable())
end

function SodaSpec:buildSwitch()
    return Soda.Switch(self:specTable())
end

function SodaSpec:buildSegmentPanels(textAndPanelTables)
    local specT = self:specTable()
    specT.text = textAndPanelTables.text
    specT.panels = textAndPanelTables.panels
    return Soda.Segment(specT)
end

function SodaSpec:buildList(textTablesAndEtc)
    local specT = self:specTable()
    specT.text = textTablesAndEtc.text
    specT.panels = textTablesAndEtc.panels
    return Soda.List(specT)
end


function SodaSpec:buildDropdownList(textTablesAndEtc)
    local specT = self:specTable()
    specT.text = textTablesAndEtc.text
    specT.panels = textTablesAndEtc.panels
    return Soda.DropdownList(specT)
end

function SodaSpec:buildSlider(sliderSpecs)
    local specT = self:specTable()
    specT.min = sliderSpecs.min
    specT.max = sliderSpecs.max
    return Soda.Slider(specT)
end

function SodaSpec:buildTextEntry(defaultText)
    local specT = self:specTable()
    specT.default = defaultText
    return Soda.TextEntry(specT)
end

function SodaSpec:buildTextScroll()
    return Soda.TextScroll(self:specTable())
end

function SodaSpec:buildTextWindow(textBody)
    return Soda.TextWindow(self:specTable())
end

function SodaSpec:buildAlert()
    return Soda.Alert(self:specTable())
end

function SodaSpec:buildAlert2()
    return Soda.Alert2(self:specTable())
end

function SodaSpec:buildWindow()
    return Soda.Window(self:specTable())
end

--spec-setting functions

function SodaSpec:setBlurred(blurBool)
    self.blurred = blurBool
end

function SodaSpec:setTitle(title)
    self.title = title
end

function SodaSpec:setPosition(x, y)
    self.x = x
    self.y = y
end

function SodaSpec:setSize(w, h)
    self.w = w
    self.h = h
end

function SodaSpec:setShapeFill(fillColor)
    self.style.shape.fill = fillColor
end

function SodaSpec:setFontColor(fontColor)
    self.style.title.fill = fontColor
    self.style.text.fill = fontColor
end

function SodaSpec:setHighlightFill(highlightFillColor)
    self.style.highlight.shape.fill = highlightFillColor
end

function SodaSpec:setHighlightTextColor(highlightTextColor)
    self.style.highlight.text.fill = highlightTextColor
end

function SodaSpec:setBackButtonDirection(direction)
    self.direction = direction
end

function SodaSpec:useShapeRoundedRect()
    self.shape = Soda.RoundedRectangle
end

function SodaSpec:setParent(parentElement)
    self.parent = parentElement
end

function SodaSpec:setCallback(callbackFunction)
    self.callback = callbackFunction
end

function SodaSpec:setButtonContent(contentText)
    self.content = contentText
end

function SodaSpec:setOKButtonText(okButtonText)
    self.ok = okButtonText
end

function SodaSpec:setCancelButtonText(cancelButtonText)
    self.cancel = cancelButtonText
end

function SodaSpec:shouldShowCloseX(shouldShow)
    self.close = shouldShow
end

function SodaSpec:hideDefaultCancelAndOK()
    self.ok = false
    self.cancel = false
end

function SodaSpec:setTextBodyForScrollingText(scrollText)
    self.textBody = scrollText
end

function SodaSpec:setShadow()
    self.shadow = true
end
